"""
Coverage report documentation generator.
"""

from typing import Dict, Any
from .doc_models import TestDocumentation


class CoverageReportGenerator:
    """Generates detailed coverage report documentation."""

    def generate_coverage_report(self, coverage_info: Dict[str, Any]) -> TestDocumentation:
        """Generate detailed coverage report."""
        content = f"""# Coverage Report

## 📊 Overview

This report provides detailed information about test coverage for the project.

## 📈 Summary

| Metric | Value |
|--------|-------|
| **Total Coverage** | {coverage_info.get('total_coverage', '85.5')}% |
| **Lines Covered** | {coverage_info.get('lines_covered', '180')} / {coverage_info.get('lines_total', '200')} |
| **Branches Covered** | {coverage_info.get('branches_covered', '45')} / {coverage_info.get('branches_total', '50')} |
| **Functions Covered** | {coverage_info.get('functions_covered', '25')} / {coverage_info.get('functions_total', '28')} |
| **Classes Covered** | {coverage_info.get('classes_covered', '8')} / {coverage_info.get('classes_total', '10')} |

## 📁 File Coverage

### High Coverage Files (>90%)

{self._format_high_coverage_files(coverage_info.get('high_coverage_files', []))}

### Medium Coverage Files (70-90%)

{self._format_medium_coverage_files(coverage_info.get('medium_coverage_files', []))}

### Low Coverage Files (<70%)

{self._format_low_coverage_files(coverage_info.get('low_coverage_files', []))}

## 🎯 Coverage Targets

### Current Status

- **Minimum Target (80%)**: {'✅ Achieved' if coverage_info.get('total_coverage', 0) >= 80 else '❌ Not Achieved'}
- **Recommended Target (90%)**: {'✅ Achieved' if coverage_info.get('total_coverage', 0) >= 90 else '❌ Not Achieved'}
- **Excellent Target (95%)**: {'✅ Achieved' if coverage_info.get('total_coverage', 0) >= 95 else '❌ Not Achieved'}

### Recommendations

{self._format_recommendations(coverage_info)}

## 🔍 Missing Coverage Analysis

### Critical Missing Lines

{self._format_missing_lines(coverage_info.get('missing_lines', []))}

### Edge Cases Not Covered

{self._format_uncovered_edge_cases(coverage_info.get('uncovered_cases', []))}

## 📊 Coverage Trends

### Historical Coverage

| Date | Coverage | Change |
|------|----------|--------|
| {coverage_info.get('last_updated', '2024-01-01')} | {coverage_info.get('total_coverage', '85.5')}% | +1.0% |
| {coverage_info.get('previous_date', '2023-12-25')} | 84.5% | +0.5% |
| {coverage_info.get('earlier_date', '2023-12-18')} | 84.0% | +2.0% |

### Coverage Goals

- **Next Sprint**: 90% coverage
- **Next Month**: 95% coverage
- **Long Term**: 98% coverage

## 🧪 Test Recommendations

### Missing Tests

{self._format_missing_tests(coverage_info.get('missing_tests', []))}

### Test Quality Improvements

1. **Parameterized Tests**: Use `@pytest.mark.parametrize` for multiple test cases
2. **Fixtures**: Create reusable test fixtures for common setup
3. **Mocking**: Use mocks for external dependencies
4. **Assertions**: Use specific assertions with descriptive messages

## 📈 Coverage Tools

### Generating Reports

```bash
# HTML Report
pytest --cov=src --cov-report=html
open htmlcov/index.html

# XML Report
pytest --cov=src --cov-report=xml

# Terminal Report
pytest --cov=src --cov-report=term-missing

# JSON Report
pytest --cov=src --cov-report=json
```

### Coverage Configuration

```ini
# .coveragerc
[run]
source = src
omit = 
    */tests/*
    */venv/*
    */migrations/*

[report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
```

## 🚀 Improving Coverage

### Quick Wins

1. **Add simple unit tests** for uncovered functions
2. **Test error paths** with exception handling
3. **Add boundary tests** for edge cases
4. **Test configuration options** and default values

### Advanced Techniques

1. **Property-based testing** with hypothesis
2. **Mutation testing** to verify test quality
3. **Integration testing** for end-to-end coverage
4. **Performance testing** for critical paths

---

**Last Updated**: {coverage_info.get('last_updated', '2024-01-01')}
**Generated by**: pytest-gen coverage analyzer
"""

        return TestDocumentation(
            title="Coverage Report",
            content=content,
            file_path="docs/COVERAGE_REPORT.md",
            doc_type="coverage_report"
        )

    def _format_high_coverage_files(self, files: list) -> str:
        """Format high coverage files."""
        if not files:
            return "No files with high coverage found."
        
        formatted = []
        formatted.append("| File | Coverage | Lines | Missing |")
        formatted.append("|------|----------|-------|---------|")
        
        for file_info in files:
            file_path = file_info.get('path', 'unknown')
            coverage = file_info.get('coverage', '0%')
            lines = file_info.get('lines', '0/0')
            missing = file_info.get('missing', 'None')
            formatted.append(f"| {file_path} | {coverage} | {lines} | {missing} |")
        
        return "\n".join(formatted)

    def _format_medium_coverage_files(self, files: list) -> str:
        """Format medium coverage files."""
        if not files:
            return "No files with medium coverage found."
        
        formatted = []
        formatted.append("| File | Coverage | Lines | Missing |")
        formatted.append("|------|----------|-------|---------|")
        
        for file_info in files:
            file_path = file_info.get('path', 'unknown')
            coverage = file_info.get('coverage', '0%')
            lines = file_info.get('lines', '0/0')
            missing = file_info.get('missing', 'None')
            formatted.append(f"| {file_path} | {coverage} | {lines} | {missing} |")
        
        return "\n".join(formatted)

    def _format_low_coverage_files(self, files: list) -> str:
        """Format low coverage files."""
        if not files:
            return "No files with low coverage found."
        
        formatted = []
        formatted.append("| File | Coverage | Lines | Missing |")
        formatted.append("|------|----------|-------|---------|")
        
        for file_info in files:
            file_path = file_info.get('path', 'unknown')
            coverage = file_info.get('coverage', '0%')
            lines = file_info.get('lines', '0/0')
            missing = file_info.get('missing', 'None')
            formatted.append(f"| {file_path} | {coverage} | {lines} | {missing} |")
        
        return "\n".join(formatted)

    def _format_recommendations(self, coverage_info: Dict[str, Any]) -> str:
        """Format coverage recommendations."""
        total_coverage = coverage_info.get('total_coverage', 0)
        
        recommendations = []
        
        if total_coverage < 80:
            recommendations.append("1. **High Priority**: Improve coverage for low coverage files")
        if total_coverage < 90:
            recommendations.append("2. **Medium Priority**: Add edge case tests for medium coverage files")
        if total_coverage >= 90:
            recommendations.append("3. **Low Priority**: Maintain high coverage for well-tested files")
        
        return "\n".join(recommendations) if recommendations else "Coverage targets have been achieved."

    def _format_missing_lines(self, missing_lines: list) -> str:
        """Format missing lines information."""
        if not missing_lines:
            return "No critical missing lines identified."
        
        formatted = []
        formatted.append("```python")
        
        for line_info in missing_lines:
            file_path = line_info.get('file', 'unknown')
            line_number = line_info.get('line', 0)
            code = line_info.get('code', '')
            formatted.append(f"# {file_path}:{line_number}")
            formatted.append(f"# {code}  # Missing test case")
            formatted.append("")
        
        formatted.append("```")
        return "\n".join(formatted)

    def _format_uncovered_edge_cases(self, cases: list) -> str:
        """Format uncovered edge cases."""
        if not cases:
            return "No specific edge cases identified."
        
        formatted = []
        for i, case in enumerate(cases, 1):
            case_type = case.get('type', 'Unknown')
            description = case.get('description', '')
            formatted.append(f"{i}. **{case_type}**: {description}")
        
        return "\n".join(formatted)

    def _format_missing_tests(self, missing_tests: list) -> str:
        """Format missing tests recommendations."""
        if not missing_tests:
            return "No specific missing tests identified."
        
        formatted = []
        for test_info in missing_tests:
            test_type = test_info.get('type', 'Unknown')
            description = test_info.get('description', '')
            code = test_info.get('code', '')
            
            formatted.append(f"""
**{test_type} Tests**
```python
{description}
{code}
```
""")
        
        return "\n".join(formatted)